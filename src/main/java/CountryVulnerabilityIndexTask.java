import com.google.common.base.Preconditions;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.sql.*;

import static org.apache.spark.sql.functions.*;

/**
 * Computes a Country Vulnerability Index based on:
 * 1. Human impact (40% weight)
 * 2. Economic damage (35% weight)
 * 3. Recovery time (25% weight)
 * 
 * Methodology:
 * - Normalizes each component relative to global totals
 * - Handles missing data via imputation
 * - Produces ranked country list by composite score
 */
public class CountryVulnerabilityIndexTask {
    public static void main(String[] args) {
        Preconditions.checkArgument(args.length == 2,
                "Usage: CountryVulnerabilityIndexTask <input_csv> <output_dir>");
        new CountryVulnerabilityIndexTask().run(args[0], args[1]);
    }

    public void run(String inputCsvPath, String outputDirPath) {
        // Initialize Spark
        SparkConf conf = new SparkConf()
                .setAppName("Country Vulnerability Index")
                .setMaster("local[*]");

        JavaSparkContext jsc = new JavaSparkContext(conf);
        SparkSession spark = SparkSession.builder().config(conf).getOrCreate();

        try {
            // Load and process data
            Dataset<Row> df = spark.read()
                    .option("header", "true")
                    .option("inferSchema", "true")
                    .option("delimiter", ",")
                    .csv(inputCsvPath);

            // Calculate vulnerability metrics
            Dataset<Row> vulnerabilityIndex = calculateVulnerabilityIndex(df);

            // Save results
            vulnerabilityIndex.write()
                    .option("header", "true")
                    .mode(SaveMode.Overwrite)
                    .csv(outputDirPath);
        } finally {
            jsc.close();
        }
    }

    /**
     * Computes vulnerability metrics through 3 stages:
     * 1. Data cleaning: Handle nulls and derive duration
     * 2. Country aggregation: Sum deaths/damage, average recovery
     * 3. Index calculation: Normalized weighted composite
     */
    private Dataset<Row> calculateVulnerabilityIndex(Dataset<Row> df) {
        // Handle null damage values
        double avgDamage = df.select(avg("Total_Damage_Adjusted"))
                .first()
                .getDouble(0);

        return df.withColumn("Effective_Damage",
                when(col("Total_Damage_Adjusted").isNull(), avgDamage)
                        .otherwise(col("Total_Damage_Adjusted")))
                // Calculate disaster duration
                .withColumn("Duration_Days",
                        datediff(
                                to_date(concat_ws("-", col("End_Year"), col("End_Month"), col("End_Day"))),
                                to_date(concat_ws("-", col("Start_Year"), col("Start_Month"), col("Start_Day"))))
                                .plus(1))
                // Aggregate by country
                .groupBy("Country")
                .agg(
                        sum("Total_Deaths").alias("Total_Deaths"),
                        sum("Effective_Damage").alias("Total_Damage"),
                        avg("Duration_Days").alias("Avg_Recovery_Days"),
                        count("*").alias("Disaster_Count"))
                // Calculate normalized components
                .withColumn("Death_Rate",
                        col("Total_Deaths").divide(sum("Total_Deaths").over()))
                .withColumn("Damage_Rate",
                        col("Total_Damage").divide(sum("Total_Damage").over()))
                .withColumn("Recovery_Rate",
                        col("Avg_Recovery_Days").divide(max("Avg_Recovery_Days").over()))
                // Final index calculation
                .withColumn("Vulnerability_Index",
                        col("Death_Rate").multiply(0.40)
                                .plus(col("Damage_Rate").multiply(0.35))
                                .plus(col("Recovery_Rate").multiply(0.25)))
                .select(
                        col("Country"),
                        col("Disaster_Count"),
                        col("Total_Deaths"),
                        col("Total_Damage"),
                        col("Avg_Recovery_Days"),
                        col("Vulnerability_Index"))
                .orderBy(col("Vulnerability_Index").desc());
    }
}